commonfields:
  id: ExportToCSV
  version: -1
name: ExportToCSV
script: |-
  function valueToValidString(value) {
      if (typeof value === 'object') {
          value = JSON.stringify(value);
      }
      value = value.trim().replace(/\n/g, '\\n').replace(/"/g, '""');
      if (value && value.indexOf(',') > -1) {
          value = '"' + value + '"';
      }
      return value;
  }

  function extractHeaders(objArray) {
      var headersInOrder = [];
      var headers = {};
      for (var obj of objArray) {
          for (var header of Object.keys(obj)) {
              if (!headers.hasOwnProperty(header)) {
                  headersInOrder.push(header);
                  // maintain a map to enable quick check if the header was added before
                  headers[header] = '';
              }
          }
      }
      return headersInOrder;
  }

  function convertToCSV(objArray, headers) {
      if (!headers) {
          headers = extractHeaders(objArray);
      }
      var rows = [];
      for (var obj of objArray) {
          if (typeof obj !== 'object') {
              throw "Array contains '" + typeof obj + "' member: '" + obj + "'" ;
          }
          var row = [];
          // loop on headersInOrder to extract values from the object and add to 'row' to match headers order.
          for (var header of headers) {
              var value = '';
              if (obj.hasOwnProperty(header)) {
                  value = valueToValidString(obj[header]);
              }
              row.push(value);
          }
          rows.push(row);
      }
      // create file content
      var fileContent = headers.join() + '\r';
      for (var i = 0; i < rows.length;  i++) {
          var line = rows[i].join();
          fileContent += '\n' + line ;
      }
      return fileContent;
  }

  if (typeof args.csvArray === 'string') {
      // try to parse string to json
      try {
          args.csvArray = JSON.parse(args.csvArray);
      } catch (err) {
          return {
              Type: entryTypes.error,
              ContentFormat: formats.text,
              Contents: 'The csvArray that was passed was not array!'
          };
      }
  }
  if (!Array.isArray(args.csvArray)) {
      //wrap in an array
      args.csvArray = [args.csvArray];
  }
  if (args.headers && !Array.isArray(args.headers)){
      args.headers = args.headers.split(',');
  }

  var csvString = convertToCSV(args.csvArray, args.headers);
  var createdFileID = saveFile(csvString);

  return {
      Type: 3,
      FileID: createdFileID,
      File: args.fileName,
      Contents: args.fileName
  };
type: javascript
tags:
- Utility
- csv
comment: Export given array to csv file
enabled: true
args:
- name: fileName
  required: true
  default: true
  description: output filename
- name: csvArray
  required: true
  description: Array to export
  isArray: true
- name: headers
  description: Array to hold the file headers in order.  Also excepts a comma separated
    list.
  isArray: true
scripttarget: 0
